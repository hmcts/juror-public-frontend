stage('Build Public Front End') {
  node('moj-build-slave-frontend') {
    echo('Build Public Front End ')
    git branch: '$gitlabBranch', credentialsId: GITLAB_CREDENTIALS_ID, url: '$GITLAB_URL/$BUREAU_FRONT_END_BUILD_REPO_NAME'
    sh 'set +x'
    sh 'echo ${gitlabBranch}'
    sh 'echo "Installing NPMs"'
    sh 'npm install --silent; echo "Copying secret template"; cp ./server/config/environment/secret.template.js ./server/config/environment/secret.js'
    sh 'echo "Run build and unit tests"'
    sh 'NODE_ENV=test grunt test' 
    sh 'echo "Run prod build for stable deployment"'
    sh 'NODE_ENV=production grunt build:dist'
    archiveArtifacts artifacts: 'test/**'
    archiveArtifacts artifacts: 'mock/**'
    archiveArtifacts artifacts: 'dist/**'

  }
}
stage('Public Front End E2E Tests') {
  node('moj-build-slave-frontend') {
    echo('Public Front End E2E Tests')
    git branch: '$gitlabBranch', credentialsId: GITLAB_CREDENTIALS_ID, url: '$GITLAB_URL/$BUREAU_FRONT_END_E2E_TESTS_REPO_NAME'
    sh 'set +x'
    sh 'echo Testing ${gitlabBranch}'
    unarchive mapping: ['mock/' : '.']
    unarchive mapping: ['test/' : '.']
    sh 'pm2 stop odsc_mock_server || echo "ODSC Mock Server not running"'
    sh 'pm2 stop public_frontend || echo "Public FrontEnd not running"'
    sh 'mv ./mock/ test/'
    sh 'cd test/; npm install --silent; PORT=3050 NODE_ENV=test pm2 start ./node_modules/odsc-mock-json-api/bin/odsc-mock-server.js --name odsc_mock_server; PORT=3000 NODE_ENV=test pm2 start server/index.js --name public_frontend'
    sh 'echo "Waiting for the service to start"; until $(curl --output /dev/null --silent --head --fail http://localhost:3000); do  printf "."; sleep 1; done'
    sh 'npm install --silent; npm install bower; bower install; grunt e2e'

    sh 'pm2 delete public_frontend; pm2 delete odsc_mock_server; killall -9 phantomjs || echo "PhantomJS not running"; rm -rf test/.mock/'
  }
}
stage('Public Front End Deploy'){
  node('moj-nodjs'){
    if ('$gitlabBranch' == "master") {
	echo "Deploying Development build."
        unarchive mapping: ['dist/' : '/home/deployment/apps/public-front-end/']
        sh 'cd /home/deployment/apps/public-front-end/dist; pm2 stop $MASTER_SERVICE_NAME || echo "Public Frontend Master not running"; npm install --silent; cp server/config/environment/secret.template.js server/config/environment/secret.js; PORT=$MASTER_SERVICE_PORT pm2 start server/index.js --name $MASTER_SERVICE_NAME'
        echo 'Development Deployment SUCCESSFUL.'}
    elseif ('$gitlabBranch' == "^deploy_.*") {                                          
        echo "Deploying Usability Testing build."
        unarchive mapping: ['dist/' : '/home/deployment/apps/public-front-end-stable/']
        sh 'cd /home/deployment/apps/public-front-end-stable/dist; pm2 stop $STABLE_SERVICE_NAME || echo "Public Frontend Stable not running"; npm install --silent; cp server/config/environment/secret.template.js server/config/environment/secret.js; PORT=$STABLE_SERVICE_PORT pm2 start server/index.js --name $STABLE_SERVICE_NAME'
        echo 'Usability Testing Deployment SUCCESSFUL.'}             
    elseif ('$gitlabBranch' == "^testing_.*") {
        echo "Deploying Functional Testing build."
        unarchive mapping: ['dist/' : '/home/deployment/apps/public-front-end-functional/']
        sh 'cd /home/deployment/apps/public-front-end-functional/dist; pm2 stop $FUNCT_SERVICE_NAME || echo "Public Frontend Functional not running"; npm install --silent; cp server/config/environment/secret.template.js server/config/environment/secret.js; PORT=$FUNCT_SERVICE_PORT pm2 start server/index.js --name $FUNCT_SERVICE_NAME'
        echo 'Functional Deployment SUCCESSFUL.'
    } else {
        echo 'Deployment not triggered, no matching branch name found.'
    }
  }
}


